/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <fun>
#include <cstrike>
#include <fakemeta>

#define PLUGIN "Rounds Menu"
#define VERSION "1.0"
#define AUTHOR "Khalid"

new const RoundForward[][] = {
	"FW_Knife",
	"FW_USP",
	"FW_Deagle",
	"FW_Mp5",
	"FW_Scout",
	"FW_M4A1",
	"FW_AK47",
	"FW_AWP"
}

new const Weapons[][] = {
	"weapon_knife",
	"weapon_usp",
	"weapon_deagle",
	"weapon_mp5navy",
	"weapon_scout",
	"weapon_m4a1",
	"weapon_ak47",
	"weapon_awp"
}


new gKeys = (MENU_KEY_0 | MENU_KEY_1 | MENU_KEY_2 | MENU_KEY_3 | MENU_KEY_4 | MENU_KEY_5 | MENU_KEY_6 | MENU_KEY_7)

new RoundNum, bool:HasChoosen, bool:RoundRunning

new iWeapType, weapon_bla[50], gMsgID

// *** Block buy things ***
new bool:gBlockBuyZone;
new gMsgStatusIcon;

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	register_menucmd(register_menuid("Choose next round:"), gKeys, "menu_handler")
	register_clcmd("say /rounds", "admin_showmenu", ADMIN_MENU)
	register_event("HLTV", "NewRound", "a", "1=0", "2=0")
	register_event("CurWeapon", "eCur", "be")
	gMsgID = get_user_msgid("CurWeapon")
	
	
	/* ************ Buy block code - By Exolent *************** */
	// Grab StatusIcon message ID
	gMsgStatusIcon = get_user_msgid("StatusIcon");
	// Hook StatusIcon message
	register_message(gMsgStatusIcon, "MessageStatusIcon");
}


public admin_showmenu(id, level, cid)
{
	if(!cmd_access(id, level, cid, 2))
		return PLUGIN_HANDLED
	
	if(HasChoosen == true)
	{
		client_print(id, print_chat, "Someone has already choosed a round.")
		return PLUGIN_HANDLED
	}
	
	static menu[128]
	format(menu, 127, "\rChoose next round:\w^n1. Knife^n2. USP^n3. Deagle^n4. Mp5^n5. Scout^n6. M4A1")
	show_menu(id, gKeys, menu)
	return PLUGIN_HANDLED
}

public menu_handler(id, key)
{
	
	switch(key)
	{
		case 0:
		{
			HasChoosen = true
			RoundNum = key
			//server_print("Knife round was choosen")
			client_print(id, print_chat, "You have choosen the knife round, it will be activated next round!")
		}
		case 1:
		{
			HasChoosen = true
			RoundNum = key
			//server_print("USP round was choosen")
			client_print(id, print_chat, "You have choosen the USP round, it will be activated next round!")
		}
		case 2:
		{
			HasChoosen = true
			RoundNum = key
			//server_print("Deagle round was choosen")
			client_print(id, print_chat, "You have choosen the deagle round, it will be activated next round!")
		}
		case 3:
		{
			HasChoosen = true
			RoundNum = key
			//server_print("Deagle round was choosen")
			client_print(id, print_chat, "You have choosen the Mp5 round, it will be activated next round!")
		}
		case 4:
		{
			HasChoosen = true
			RoundNum = key
			//server_print("Deagle round was choosen")
			client_print(id, print_chat, "You have choosen the Scout round, it will be activated next round!")
		}
		case 5:
		{
			HasChoosen = true
			RoundNum = key
			//server_print("Deagle round was choosen")
			client_print(id, print_chat, "You have choosen the M4A1 round, it will be activated next round!")
		}
		case 6:
		{
			HasChoosen = true
			RoundNum = key
			//server_print("Deagle round was choosen")
			client_print(id, print_chat, "You have choosen the AK47 round, it will be activated next round!")
		}
		case 7:
		{
			HasChoosen = true
			RoundNum = key
			//server_print("Deagle round was choosen")
			client_print(id, print_chat, "You have choosen the AWP round, it will be activated next round!")
		}
	}
	
	//server_print("Round was choosen")
}

public NewRound()
{
	static NextRoundCame
	
	if(NextRoundCame == 1 && HasChoosen == true)
	{
		new players[32], count, player
		get_players(players, count, "a")
		for(new i; i < count; i++)
		{
			player = players[i]
			strip_user_weapons(player)
			give_item(player, "weapon_knife")
			if(get_user_team(player) == 1)
				give_item(player, "weapon_glock")
			if(get_user_team(player) == 2)
				give_item(player, "weapon_usp")
		}
				
		NextRoundCame = 0
		RoundRunning = false
		HasChoosen = false
		UnblockBuyZones()
		return PLUGIN_HANDLED
	}
	
	if(HasChoosen == true && NextRoundCame == 0)
	{
		BlockBuyZones()
		RoundRunning = true
		set_task(0.5, RoundForward[RoundNum])
		NextRoundCame++
		return PLUGIN_CONTINUE
	}

	return PLUGIN_HANDLED
}

public FW_Knife()
{
	new iPlayers[32], iCount, iPlayer
	get_players(iPlayers, iCount, "a")
	
	for(new i; i < iCount; i++)
	{
		iPlayer = iPlayers[i]
		strip_user_weapons(iPlayer)
		give_item(iPlayer, "weapon_knife")
	}
	
	iWeapType = CSW_KNIFE
	copy(Weapons[0], 49, weapon_bla)
	
	client_print(0, print_chat, "[AMXX] Knife round! Don't pee on yourself!")
}

public FW_Deagle()
{
	new iPlayers[32], iCount, iPlayer
	get_players(iPlayers, iCount, "a")
	for(new i; i < iCount; i++)
	{
		iPlayer = iPlayers[i]
		strip_user_weapons(iPlayer)
		give_item(iPlayer, "weapon_deagle")
		cs_set_user_bpammo(iPlayer, CSW_DEAGLE, 35)
	}
	
	iWeapType = CSW_DEAGLE
	copy(Weapons[2], 49, weapon_bla)
	client_print(0, print_chat, "[AMXX] Deagle round! Show them your SKILLZ!")
}

public FW_USP()
{
	new iPlayers[32], iCount, iPlayer
	get_players(iPlayers, iCount, "a")
	for(new i; i < iCount; i++)
	{
		iPlayer = iPlayers[i]
		strip_user_weapons(iPlayer)
		give_item(iPlayer, "weapon_usp")
		cs_set_user_bpammo(iPlayer, CSW_USP, 100)
	}
	iWeapType = CSW_USP
	copy(Weapons[1], 49, weapon_bla)
	
	client_print(0, print_chat, "[AMXX] USP round! Do your best!")
}

public eCur(id)
{
	if(RoundRunning == true)
	{
		if( !( (1 << read_data(2) ) & (1 << iWeapType) ) )
		{
			engclient_cmd(id, weapon_bla)
			emessage_begin(MSG_ONE, gMsgID,_, id)
			ewrite_byte(1)
			ewrite_byte(iWeapType)
			ewrite_byte(-1)
			emessage_end()
			
			return PLUGIN_HANDLED
		}
	}
	
	else
		return PLUGIN_HANDLED
	return PLUGIN_HANDLED
}

public FW_Mp5()
{
	new iPlayers[32], iCount, iPlayer
	get_players(iPlayers, iCount, "a")
	for(new i; i < iCount; i++)
	{
		iPlayer = iPlayers[i]
		/*if(is_user_bot(iPlayer))
			continue;*/
			
		strip_user_weapons(iPlayer)
		give_item(iPlayer, "weapon_mp5navy")
		cs_set_user_bpammo(iPlayer, CSW_MP5NAVY, 120)
	}
	
	iWeapType = CSW_MP5NAVY
	copy(Weapons[3], 49, weapon_bla)
	client_print(0, print_chat, "[AMXX] Mp5 round! Piece of cake!")
}

public FW_Scout()
{
	new iPlayers[32], iCount, iPlayer
	get_players(iPlayers, iCount, "a")
	for(new i; i < iCount; i++)
	{
		iPlayer = iPlayers[i]
		strip_user_weapons(iPlayer)
		give_item(iPlayer, "weapon_scout")
		cs_set_user_bpammo(iPlayer, CSW_SCOUT, 90)
	}
	
	iWeapType = CSW_SCOUT
	copy(Weapons[4], 49, weapon_bla)
	client_print(0, print_chat, "[AMXX] Scout round! Ahhhhhhhhhhhhhhhhh, no!")
}

public FW_M4A1()
{
	new iPlayers[32], iCount, iPlayer
	get_players(iPlayers, iCount, "a")
	for(new i; i < iCount; i++)
	{
		iPlayer = iPlayers[i]
		strip_user_weapons(iPlayer)
		give_item(iPlayer, "weapon_m4a1")
		cs_set_user_bpammo(iPlayer, CSW_M4A1, 90)
	}
	
	iWeapType = CSW_M4A1
	copy(Weapons[5], 49, weapon_bla)
	client_print(0, print_chat, "[AMXX] M4A1 round! Be quite!!")
}

public FW_AK47()
{
	new iPlayers[32], iCount, iPlayer
	get_players(iPlayers, iCount, "a")
	for(new i; i < iCount; i++)
	{
		iPlayer = iPlayers[i]
		strip_user_weapons(iPlayer)
		give_item(iPlayer, "weapon_ak47")
		cs_set_user_bpammo(iPlayer, CSW_AK47, 90)
	}
	
	iWeapType = CSW_AK47
	copy(Weapons[5], 49, weapon_bla)
	client_print(0, print_chat, "[AMXX] AK47 round! Keep Fighting!!")
}

public FW_AWP()
{
	new iPlayers[32], iCount, iPlayer
	get_players(iPlayers, iCount, "a")
	for(new i; i < iCount; i++)
	{
		iPlayer = iPlayers[i]
		strip_user_weapons(iPlayer)
		give_item(iPlayer, "weapon_awp")
		cs_set_user_bpammo(iPlayer, CSW_AWP, 30)
	}
	
	iWeapType = CSW_AWP
	copy(Weapons[7], 49, weapon_bla)
	client_print(0, print_chat, "[AMXX] AWP round! Run for your lives!!")
}
/* ******************************* Buy block code - By Exolent ************************************* */
public MessageStatusIcon(msgID, dest, receiver) {
	// Check if status is to be shown
	if(gBlockBuyZone && get_msg_arg_int(1)) {
		
		new const buyzone[] = "buyzone";
		
		// Grab what icon is being shown
		new icon[sizeof(buyzone) + 1];
		get_msg_arg_string(2, icon, charsmax(icon));
		
		// Check if buyzone icon
		if(equal(icon, buyzone)) {
			
			// Remove player from buyzone
			RemoveFromBuyzone(receiver);
			
			// Block icon from being shown
			set_msg_arg_int(1, ARG_BYTE, 0);
		}
	}
	return PLUGIN_CONTINUE;
}

BlockBuyZones()
{
	// Hide buyzone icon from all players
	message_begin(MSG_BROADCAST, gMsgStatusIcon);
	write_byte(0);
	write_string("buyzone");
	message_end();
	
	// Get all alive players
	new players[32], pnum;
	get_players(players, pnum, "a");
	
	// Remove all alive players from buyzone
	while(pnum-- > 0)
	{
		RemoveFromBuyzone(players[pnum]);
	}
	// Set that buyzones should be blocked
	gBlockBuyZone = true;
}

RemoveFromBuyzone(id)
{
	// Define offsets to be used
	const m_fClientMapZone = 235;
	const MAPZONE_BUYZONE = (1 << 0);
	const XO_PLAYERS = 5;
	
	// Remove player's buyzone bit for the map zones
	set_pdata_int(id, m_fClientMapZone, get_pdata_int(id, m_fClientMapZone, XO_PLAYERS) & ~MAPZONE_BUYZONE, XO_PLAYERS);
}

UnblockBuyZones()
{
	// Set that buyzone should not be blocked
	gBlockBuyZone = false;
}
