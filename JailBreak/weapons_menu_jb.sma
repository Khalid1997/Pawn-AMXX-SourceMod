/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <hamsandwich>
#include <cstrike>
#include <fun>

#define PLUGIN "New Plug-In"
#define VERSION "1.0"
#define AUTHOR "author"

#define IsInBit(%1,%2)		( %2 &  (1<<%1)  )
#define InsertToBit(%1,%2)	( %2 |= (1<<%1)  )
#define RemoveFromBit(%1,%2)	( %2 &= ~(1<<%1) )

// Max BP ammo for weapons
new const MAXBPAMMO[] = { -1, 52, -1, 90, 1, 32, 1, 100, 90, 1, 120, 100, 100, 90, 90, 90, 100, 120,
	30, 120, 200, 32, 90, 120, 90, 2, 35, 90, 90, -1, 100 }

enum _:WEAPONS
{
	MAIN,
	PRIM = 1,
	SEC
}

new g_iWeaponMenu[WEAPONS]
new g_iLastWeapons[33]

new gHasChoosedWeapons, gSave

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	RegisterHam(Ham_Spawn, "player", "fw_PlayerSpawn", 1)
	
	BuildWeaponMenus()
}

public fw_PlayerSpawn(id)
{
	if(!is_user_alive(id))
	{
		return;
	}
	
	if(cs_get_user_team(id) != CS_TEAM_CT)
	{
		return;
	}
	
	if(IsInBit(id, gSave))
	{
		GiveOldWeapons(id)
		InsertToBit(id, gHasChoosedWeapons)
	}
	
	else
	{
		menu_display(id, g_iWeaponMenu[MAIN])
	}
}

public MainWeaponsMenuHandler(id, menu, item)
{
	if(!IsValid(id, item))
	{
		return;
	}
	
	static szInfo[5], iNum
	menu_item_getinfo(menu, item, iNum, szInfo, charsmax(szInfo), .callback = iNum)
	
	switch(str_to_num(szInfo))
	{
		case 1:
		{
			g_iLastWeapons[id] = 0
			menu_display(id, g_iWeaponMenu[PRIM])
		}
		
		case 2:
		{
			GiveOldWeapons(id)
			InsertToBit(id, gHasChoosedWeapons)
		}
		
		case 3:
		{
			GiveOldWeapons(id)
			InsertToBit(id, gSave);
			InsertToBit(id, gHasChoosedWeapons);
		}
	}
}

public PrimWeaponsMenuHandler(id, menu, item)
{
	if(!IsValid(id, item))
	{
		return;
	}
	
	static szInfo[5], iNum
	menu_item_getinfo(menu, item, iNum, szInfo, charsmax(szInfo), .callback = iNum)
	
	iNum = str_to_num(szInfo)
	new szWeapon[32]; get_weaponname(iNum, szWeapon, charsmax(szWeapon))
	cs_set_user_bpammo(id, iNum, MAXBPAMMO[iNum])
	give_item(id, szWeapon)
	
	g_iLastWeapons[id] |= (1<<iNum);
	
	InsertToBit(id, gHasChoosedWeapons)
	
	menu_display(id, g_iWeaponMenu[SEC])
}

public SecWeaponsMenuHandler(id, menu, item)
{
	if(!IsValid(id, item))
	{
		return;
	}
	
	static szInfo[5], iNum
	menu_item_getinfo(menu, item, iNum, szInfo, charsmax(szInfo), .callback = iNum)
	
	new szWeapon[32]; get_weaponname( ( iNum = str_to_num(szInfo) ), szWeapon, charsmax(szWeapon))
	
	cs_set_user_bpammo(id, iNum, MAXBPAMMO[iNum])
	give_item(id, szWeapon)
	
	g_iLastWeapons[id] |= (1<<iNum)
}

stock GiveOldWeapons(id)
{
	new iWeapons = g_iLastWeapons[id]
	new szWeapon[32]
	
	for(new i = CSW_P228; i < CSW_VEST; i++)
	{
		if(iWeapons & (1<<i))
		{
			get_weaponname(i, szWeapon, charsmax(szWeapon))
			
			give_item(id, szWeapon)
			cs_set_user_bpammo(id, i, MAXBPAMMO[i])
		}
	}
}

stock BuildWeaponMenus()
{
	g_iWeaponMenu[MAIN] = menu_create("Weapons Menu", "MainWeaponsMenuHandler")
	
	menu_additem(g_iWeaponMenu[MAIN], "Choose new weapons", "1")
	menu_additem(g_iWeaponMenu[MAIN], "Previous weapons", "2")
	menu_additem(g_iWeaponMenu[MAIN], "Don't ask again and save weapons", "3")
	
	g_iWeaponMenu[PRIM] = menu_create("Primary Weapons", "PrimWeaponsMenuHandler")
	g_iWeaponMenu[SEC] = menu_create("Secondary Weapons", "SecWeaponsMenuHandler")
	
	new const iPrimWeps = ( (1<<CSW_AK47) | (1<<CSW_AUG) | (1<<CSW_AWP) | (1<<CSW_FAMAS) | (1<<CSW_GALIL) \
	| (1<<CSW_G3SG1) | (1<<CSW_M249) | (1<<CSW_M3) | (1<<CSW_M4A1) | (1<<CSW_MAC10) | (1<<CSW_MP5NAVY) | \
	 (1<<CSW_P90) | (1<<CSW_SCOUT) | (1<<CSW_SG550) | (1<<CSW_SG552) | (1<<CSW_TMP) | (1<<CSW_XM1014) );
	 
	new const iNullWeapons = (1<<2) | (1<<CSW_C4) | (1<<CSW_HEGRENADE) | (1<<CSW_FLASHBANG) | (1<<CSW_SMOKEGRENADE) | (1<<CSW_KNIFE)
	
	new szWeapon[32], szInfo[5]
	
	for(new i = CSW_P228; i < CSW_VEST; i++)
	{
		if(IsInBit(i, iNullWeapons))
		{
			continue;
		}
		
		get_weaponname(i, szWeapon, charsmax(szWeapon))
		replace(szWeapon, charsmax(szWeapon), "weapon_", "")
		strtoupper(szWeapon)
		
		formatex(szInfo, charsmax(szInfo), "%d", i)
		
		menu_additem(g_iWeaponMenu[ IsInBit(i, iPrimWeps) ? PRIM : SEC ], szWeapon, szInfo)	
	}
	
	
	//menu_setprop(g_iWeaponMenu[MAIN], MPROP_EXIT, MEXIT_NEVER)
	menu_setprop(g_iWeaponMenu[PRIM], MPROP_EXIT, MEXIT_NEVER)
	menu_setprop(g_iWeaponMenu[SEC], MPROP_EXIT, MEXIT_NEVER)
}

stock IsValid(id, item)
{
	if(!is_user_alive(id))
	{
		return 0;
	}
	
	if(cs_get_user_team(id) != CS_TEAM_CT)
	{
		return 0;
	}
	
	if(item < 0)
	{
		return 0;
	}
	
	return 1
}
