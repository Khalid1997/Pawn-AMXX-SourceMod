/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <csdm>
#include <colorchat>

#define DEFAULT_MOD	NORMAL
#define MINIMUM_PLAYERS	2
#define VOTE_TIME	30.0
#define COUNT_DOWN	10

#define TASKID_VOTE 158115
#define Index(%1) (%1 + 2)

enum _:MODES
{
	NORMAL,
	FFA
}

new g_iVotes[MODES]
new g_iMenu
new g_iRestart
new g_iCount
new g_iWinningOption = 0

new const g_szVoteNames[MODES][] = { "Normal", "FFA" }

public plugin_init()
{
	register_plugin("CSDM Vote", "1.0", "Khalid :)")
	
	g_iMenu = menu_create("\r[DeathMatch Mod] \yPlease choose the mod you wish to play it!", "AddVoteHandler")
	menu_additem(g_iMenu, "Normal")
	menu_additem(g_iMenu, "FFA")
	
	menu_setprop(g_iMenu, MPROP_EXIT, 0)
}

public csdm_CfgInit()
{
	csdm_set_ffa(Index(DEFAULT_MOD))
	set_task(35.0, "StartVote", TASKID_VOTE, .flags = "b")
}

public StartVote(iTaskId)
{
	arrayset(g_iVotes, 0, MODES)
	if(g_iRestart)
	{
		g_iRestart = 0
		change_task(iTaskId, 35.0)
	}
	
	new iPlayers[32], iNum
	get_players(iPlayers, iNum, "ch")
	
	if(iNum < MINIMUM_PLAYERS)
	{
		return;
	}
	
	remove_task(iTaskId)
	
	for(new i; i < iNum; i++)
	{
		menu_display(iPlayers[i], g_iMenu)
	}
	
	set_task(VOTE_TIME, "CountVotes")
}

public AddVoteHandler(id, menu, item)
{
	if(item < 0)
	{
		return;
	}
	
	g_iVotes[item]++
	
	new szName[32]; get_user_name(id, szName, 31)
	
	ColorChat(0, GREEN, "^1%s ^4chose^3 %s", szName, g_szVoteNames[item])
}

public CountVotes()
{
	if(g_iVotes[NORMAL] == g_iVotes[FFA])
	{
		ColorChat(0, GREEN, "^1** The vote was a tie. It will restart in ^315 ^1seconds. ^4(Both options got %d votes)", g_iVotes[0])

		g_iRestart = 1
		
		set_task(15.0, "StartVote", TASKID_VOTE, .flags = "b")
		
		new iPlayers[32], iNum, iDump, iNewMenu, iPlayer
		get_players(iPlayers, iNum, "ch")
		
		for(new i; i < iNum; i++)
		{
			iPlayer = iPlayers[i]
			player_menu_info(iPlayer, iDump, iNewMenu, iDump)
			
			if(iNewMenu == g_iMenu)
			{
				menu_cancel(iPlayer)
			}
		}
		
		return;
	}
	
	menu_destroy(g_iMenu)
	
	new iWinningVote, iLosingVote
	if(g_iVotes[NORMAL] > g_iVotes[FFA])
	{
		iWinningVote = NORMAL;
		iLosingVote = FFA
	}
	
	else
	{
		iWinningVote = FFA;
		iLosingVote = NORMAL
	}
	
	ColorChat(0, GREEN, "^1** The winner with^4 %d ^1votes is: ^4( %s )", g_iVotes[iWinningVote], g_szVoteNames[iWinningVote])
	ColorChat(0, GREEN, "^1** The mod that lost was:^4 ( %s ) ^1with ^4%d votes.", g_szVoteNames[iLosingVote], g_iVotes[iLosingVote])
	
	g_iWinningOption = Index(iWinningVote)
	g_iCount = COUNT_DOWN + 1
	
	CountDown()
	set_task(1.0, "CountDown",_,_,_, "a", g_iCount)
}

public CountDown()
{
	--g_iCount
	
	if(g_iCount == 0)
	{
		set_cvar_num("sv_restart", 1)
		csdm_set_ffa(g_iWinningOption)
		return;
	}
	
	set_hudmessage(255, 255, 255, -1.0, 0.35, 0, 0.0, 1.0, 0.1, 0.0, -1)
	show_hudmessage(0, "Round will restart in %d Seconds!", g_iCount)
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1033\\ f0\\ fs16 \n\\ par }
*/
