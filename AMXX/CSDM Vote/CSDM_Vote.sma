/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <csdm>
#include <colorchat>
#include <hamsandwich>
#include <fakemeta>

#define MINIMUM_PLAYERS	1
#define VOTE_TIME	30.0
#define COUNT_DOWN	10

#define TASKID_VOTE 158115

#define MENU_PREFIX "\r[UaE-Gaming]"
#define CHAT_PREFIX "^x04[UaE-Gaming]"

enum _:ModNames
{
	MOD_Normal,
	MOD_NormalHS,
	MOD_FFA,
	MOD_FFA_HS
}

new bool:g_bHeadshot = false;
new const g_szVoteNames[ModNames][] = {
	"Team DM",
	"Team DM + HS Only",
	"Free for All",
	"Free for All + HS only"
};

new gMaxPlayers;
new Float:g_flRestartVoteTime = 15.0;
new g_iVoteIndexes[ModNames];
new g_iVotes[ModNames];
new g_iMenu;
new g_iRestart;
new g_iCount;
new g_iWinningOption;

public plugin_init()
{
	register_plugin("CSDM Vote", "1.0", "Khalid :)")
	
	RegisterHam(Ham_TraceAttack, "player", "fw_TraceAttack", 0)
	//RegisterHam(Ham_TraceAttack, "player", "fw_TraceAttack", 0);
	
	gMaxPlayers = get_maxplayers()
}

CreateVoteMenu()
{
	new szTitle[128];
	formatex(szTitle, charsmax(szTitle), "%s \yChoose the mod you wish to play:", MENU_PREFIX);
	new iMenu = menu_create(szTitle, "MenuHandler_Vote")
	
	new szInfo[3]
	for(new i; i < sizeof g_iVoteIndexes; i++)
	{
		if(g_iVoteIndexes[i])
		{
			num_to_str(i, szInfo, charsmax(szInfo));
			menu_additem(iMenu, g_szVoteNames[i], szInfo);
		}
	}
	
	menu_setprop(iMenu, MPROP_EXIT, 0)
	
	return iMenu;
}

public csdm_CfgInit()
{
	csdm_set_ffa(0);
	g_bHeadshot = false;
	g_iVoteIndexes = { 1, 1, 1, 1 };
	g_iRestart = 0;
	
	set_task(45.0, "StartVote", TASKID_VOTE, .flags = "b")
}

public StartVote(iTaskId)
{
	//client_print(0, print_chat, "** DEBUG: Vote Started: %d %d %d %d", g_iVoteIndexes[0], g_iVoteIndexes[1], g_iVoteIndexes[2], g_iVoteIndexes[3]);
	
	arrayset(g_iVotes, 0, ModNames)
	if(g_iRestart)
	{
		g_iRestart = 0
		change_task(iTaskId, 35.0)
	}
	
	new iPlayers[32], iNum
	get_players(iPlayers, iNum, "ch")
	
	if(!iNum || iNum < MINIMUM_PLAYERS)
	{
		return;
	}
	
	remove_task(iTaskId);
	g_iMenu = CreateVoteMenu();
	
	for(new i; i < iNum; i++)
	{
		menu_display(iPlayers[i], g_iMenu);
	}
	
	set_task(VOTE_TIME, "CountVotes");
}

public MenuHandler_Vote(id, menu, item)
{
	if(item < 0)
	{
		return;
	}
	
	new szInfo[3], iItemIndex;
	menu_item_getinfo(menu, item, iItemIndex, szInfo, charsmax(szInfo), .callback = iItemIndex);
	iItemIndex = str_to_num(szInfo);
	
	g_iVotes[iItemIndex]++
	
	new szName[32]; get_user_name(id, szName, 31)
	ColorChat(0, GREEN, "^1%s ^4chose^3 %s", szName, g_szVoteNames[iItemIndex])
}

public CountVotes()
{
	menu_destroy(g_iMenu);
	
	new iBiggestVoteCount;
	new iBiggestVoteIndex;
	
	new bool:bTie;
	for(new i; i < ModNames; i++)
	{
		if(g_iVotes[i] >= iBiggestVoteCount)
		{
			iBiggestVoteCount = g_iVotes[i];
			iBiggestVoteIndex = i;
		}
	}
	
	new iCopyIndexes[ModNames]; iCopyIndexes = g_iVoteIndexes;
	arrayset(g_iVoteIndexes, 0, sizeof g_iVoteIndexes);
	new iCount = 1; 	// Default at 1; 
	for(new i; i < ModNames; i++)
	{
		if(iCopyIndexes[i] && i != iBiggestVoteIndex && g_iVotes[iBiggestVoteIndex] == g_iVotes[i])
		{
			bTie = true;
			g_iVoteIndexes[i] = 1;
			iCount++;
		}
	}
	
	g_iVoteIndexes[iBiggestVoteIndex] = 1;
	
	if(bTie)
	{
		ColorChat(0, GREEN, "%s ^1The vote was a tie. It will restart in ^3%0.1f ^1seconds. ^4(%d options got %d votes)", CHAT_PREFIX, g_flRestartVoteTime, iCount, g_iVotes[iBiggestVoteIndex])

		g_iRestart = 1
		
		set_task(g_flRestartVoteTime, "StartVote", TASKID_VOTE, .flags = "b")
		return;
	}
	
	ColorChat(0, GREEN, "%s ^1The winner with^4 %d ^1votes is: ^4( %s )", CHAT_PREFIX, g_iVotes[iBiggestVoteIndex], g_szVoteNames[iBiggestVoteIndex])

	g_iWinningOption = iBiggestVoteIndex
	g_iCount = COUNT_DOWN + 1
	
	CountDown()
	set_task(1.0, "CountDown",_,_,_, "a", g_iCount)
}

public CountDown()
{
	--g_iCount
	
	if(g_iCount == 0)
	{
		switch(g_iWinningOption)
		{
			case MOD_Normal:
			{
				csdm_set_ffa(0);
				g_bHeadshot = false;
			}
			
			case MOD_NormalHS:
			{
				csdm_set_ffa(0);
				g_bHeadshot = true;
			}
			
			case MOD_FFA:
			{
				csdm_set_ffa(1);
				g_bHeadshot = false;
			}
			
			case MOD_FFA_HS:
			{
				csdm_set_ffa(1);
				g_bHeadshot = true;
			}
		}
		
		set_cvar_num("sv_restart", 1)
		return;
	}
	
	set_hudmessage(255, 255, 255, -1.0, 0.35, 0, 0.0, 1.0, 0.1, 0.0, -1)
	show_hudmessage(0, "Round will restart in %d Seconds!", g_iCount)
}

	
public fw_TraceAttack(id, iAttacker, Float:damage, Float:direction[3], iTr, damagebits)
{
	if(!g_bHeadshot)
	{
		return HAM_IGNORED;
	}
	
	if( id == iAttacker || !(1 <= iAttacker <= gMaxPlayers) )
	{
		return HAM_IGNORED
	}
	
	if(get_user_weapon(iAttacker) == CSW_KNIFE)
	{
		return HAM_IGNORED
	}
	
	if(get_tr2(iTr, TR_iHitgroup) != HIT_HEAD)
	{
		set_tr2(iTr, TR_flFraction, 1.0)
		return HAM_SUPERCEDE
	}
	
	return HAM_IGNORED
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1033\\ f0\\ fs16 \n\\ par }
*/
