/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>


#define PLUGIN "New Plug-In"
#define VERSION "1.0"
#define AUTHOR "author"

new g_iSteam[33]

enum _:PROVIDERS
{
	DP_AUTH_NONE, 		//	0	"N/A" - slot is free
	DP_AUTH_DPROTO,		//	1	dproto
	DP_AUTH_STEAM,		//	2	Native Steam
	DP_AUTH_STEAMEMU,	//	3	SteamEmu
	DP_AUTH_REVEMU,		// 	4	RevEmu
	DP_AUTH_OLDREVEMU,	//	5	Old RevEmu
	DP_AUTH_HLTV,		// 	6	HLTV
	DP_AUTH_SC2009,		// 	7
	DP_AUTH_AVSMP		// 	8
}

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	set_task(0.2, "force", .flags = "b");
}

public client_putinserver(id)
{
	static iProtocol, iIdProvider;
	GetUserDprotoInfo(id, iProtocol, iIdProvider);
	g_iSteam[id] = ( iIdProvider == DP_AUTH_STEAM );
}

public force()
{
	static iPlayers[32], iNum, i, iPlayer;
	get_players(iPlayers, iNum, "h");
	
	for(i = 0; i < iNum; i++)
	{
		iPlayer = iPlayers[i]
		
		if(g_iSteam[iPlayer])
		{
			//server_print("Steam");
			client_cmd(iPlayer, ";alias ll ^"cl_minmodels 0^"");
			client_cmd(iPlayer, "ll");
		}
		
		else
		{
			client_cmd(iPlayer, "cl_minmodels 0");
		}
	}
}

/* ------------------------------ INCLUDE BY KHALID :) ------------------------------ */

new const g_szAuthProviderString[PROVIDERS][] = {
	"N/A",  //slot is free
	"dproto",
	"Steam(Native)",
	"SteamEmu",
	"revEmu",
	"old revEmu",
	"HLTV",
	"SteamClient2009",
	"AVSMP"
	//"ERROR" 	//-1 if slot id is invalid	
}

new bool:g_bInit = false
new pcv_dp_r_protocol
new pcv_dp_r_id_provider

/*
	The "dp_clientinfo" command are exported by dproto. The syntax is:
		dp_clientinfo <id>
	where id is slot index (1 to 32)
	After executing this command dproto will set dp_r_protocol and dp_r_id_provider cvars.
	The dp_r_protocol keeps client's protocol
	The dp_r_id_provider cvar will be set to:
		1:  if client's steam id assigned by dproto (player uses no-steam client without emulator)
		2:  if client's steam id assigned by native steam library (or by another soft that emulates this library, server-side revEmu for example)
		3:  if client's steam id assigned by dproto's SteamEmu emulator
		4:  if client's steam id assigned by dproto's revEmu emulator
		5:  if client's steam id assigned by dproto's old revEmu emulator
		6:  if client is HLTV
		7:  if client's steam id assigned by dproto's SC2009 emulator
		8:  if client's steam id assigned by dproto's AVSMP emulator

	If slot is empty, both dp_r_protocol and dp_r_id_provider cvars will be set to 0
	If slot is invalid (id < 1 or  id > max players), both dp_r_protocol and dp_r_id_provider cvars will be set to -1
*/

stock Initialize()
{
	if(!g_bInit)
	{
		pcv_dp_r_protocol = get_cvar_pointer ("dp_r_protocol")
		pcv_dp_r_id_provider = get_cvar_pointer ("dp_r_id_provider")
		
		if(!pcv_dp_r_id_provider || !pcv_dp_r_protocol)
		{
			log_error(AMX_ERR_GENERAL, "Dproto is not running or an old version is running")
			return;
		}
		
		g_bInit = true
	}
}

stock GetUserDprotoInfo(id, &iProtocol, &iIdProvider, szAuthProviderString[] = "", iLen = 0)
{
	iProtocol = 0; iIdProvider = 0
	
	if(!g_bInit)
	{
		Initialize()

		if(!g_bInit)
		{
			//iProtocol = 0; iIdProvider = 0
			return;
		}
	}
	
	server_cmd("dp_clientinfo %d", id)
	server_exec()
	
	iProtocol = get_pcvar_num(pcv_dp_r_protocol)
	iIdProvider = get_pcvar_num(pcv_dp_r_id_provider)
	
	if( ! ( DP_AUTH_NONE <= iIdProvider < PROVIDERS ) )
	{
		copy(szAuthProviderString, iLen, "ERROR")
	}
	
	else	copy(szAuthProviderString, iLen, g_szAuthProviderString[iIdProvider])
}
