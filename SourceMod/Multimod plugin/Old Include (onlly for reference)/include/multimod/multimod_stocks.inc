#if defined _multimod_stocks_included_
#endinput
#endif
#define _multimod_stocks_included_

#include <multimod>

stock bool MM_IsFileExists(char[] szFile)
{
	char szFilePath[PLATFORM_MAX_PATH];
	//FormatEx(szFilePath, sizeof szFilePath, "cfg/%s/%s", MM_FOLDER_MAIN, szFile);
	MultiMod_BuildPath(MultiModPath_Base, szFilePath, sizeof szFilePath, "%s", szFile);
	return FileExists(szFilePath);
}

stock bool MM_GetRandomMapFromMod(int iModId, char[] szMap, int iSizeMap)
{
	int iCount;
	ArrayList hHandle = CreateArray(MM_MAX_MAP_NAME);
	MultiMod_PassModListFromMod(iModId, ModList_Maps, HandleType_ArrayList, hHandle, iCount);
	
	if(!iCount)
	{
		delete hHandle;
		return false;
	}
	
	GetArrayString(hHandle, GetRandomInt(0, iCount - 1), szMap, iSizeMap);
	delete hHandle;
	return true;
}

stock void ParseMapFileLine(char[] szLine, char[][] szParts, int iSize1, int iSize2, bool bCopyRemainder = true)
{
	ExplodeString(szLine, " ", szParts, iSize1, iSize2, bCopyRemainder);
	
	for(int i; i < iSize1; i++)
	{
		StripQuotes(szParts[i]);
	}
}

stock bool PrintDebug(char[] szMessage, any ...)
{
	// get rid of the warning
	bool iDebugOff = false;
	if(iDebugOff == MM_DEBUG)
	{
		return;
	}
	
	char szBuffer[256];
	VFormat(szBuffer, sizeof szBuffer, szMessage, 2);
	//PrintToServer("DEBUG: %s", szBuffer);
	
	LogToFile(MM_LOG_FILE, szBuffer);
}

#define FILE_BASE	0
#define FILE_PLUGIN 1
#define FILE_MAP	2
#define FILE_CONFIG 3

stock void MM_CreateMultiModFile(int iFile, char[] szFilePath, bool bReplace = false, int iModId = ModIndex_Null)
{
	if(!bReplace)
	{
		if(FileExists(szFilePath))
		{
			return;
		}
	}
	
	File f = OpenFile(szFilePath, "w");
	
	if(f == null)
	{
		return;
	}
	
	PrintDebug("Write File: %s", szFilePath);
	
	char szModName[MM_MAX_MOD_PROP_LENGTH];
	if(iModId != ModIndex_Null)
	{
		MultiMod_GetModProp(iModId, MultiModProp_Name, szModName, sizeof szModName);
	}
	
	switch(iFile)
	{
		case FILE_PLUGIN:
		{
			WriteFileLine(f, "# Generated by MultiMod Plugin");
			WriteFileLine(f, 
				 "# --------------------------------------------------------------------------------------------------\
				\n# \t\t\t\tMultiMod%s%s%s Plugin file\
				\n# --------------------------------------------------------------------------------------------------\
				\n#\
				\n# Any line beginning with a ';', '#' or '//' is a comment.\
				\n# Write each plugin in one line WITH the .smx extension.",
				iModId == ModIndex_Null ? "" : " ", 
				iModId == ModIndex_Null ? "" : szModName, 
				iModId == ModIndex_Null ? "" : "'s");
		}
		
		case FILE_MAP:
		{
			WriteFileLine(f, "# Generated by MultiMod Plugin");
			WriteFileLine(f, 
				 "# --------------------------------------------------------------------------------------------------\
				\n# \t\t\t\tMultiMod%s%s%s Map file\
				\n# --------------------------------------------------------------------------------------------------\
				\n#\
				\n# List maps here that should be used for this specific Mod.\
				\n# Any line beginning with a ';', '#' or '//' is a comment.\
				\n# Write each map in one line WITHOUT the .bsp extension.",
				iModId == ModIndex_Null ? "" : " ", 
				iModId == ModIndex_Null ? "" : szModName, 
				iModId == ModIndex_Null ? "" : "'s");
		}
		
		case FILE_BASE:
		{
			WriteFileLine(f, 
				"# --------------------------------------------------------------------------------------------------\
				\n# |                                    MultiMod Base File                                        |\
				\n# --------------------------------------------------------------------------------------------------\
				\n# Any line beginning with a ';', '#' or '//' is a comment\
				\n# Write Mods under %s tag\
				\n# Syntax:\
				\n# \"Mod Name\":\"PluginFileName\":\"MapFileName\":\"CFG File\"\
				\n%s\
				\n\
				\n\
				\n\
				\n# Write Default Plugins under %s tag\
				\n# Default Plugins are plugins that run for ALL MODs\
				\n# They must be placed in plugins folder to work\
				\n%s", 
				MODS_KEY, MODS_KEY, DEFAULT_PLUGINS_KEY, DEFAULT_PLUGINS_KEY);
				
				// Default plugins
			WriteFileLine(f, 
				"admin-flatfile.smx\n\
				adminhelp.smx\n\
				adminmenu.smx\n\
				antiflood.smx\n\
				basebans.smx\n\
				basechat.smx\n\
				basecomm.smx\n\
				basecommands.smx\n\
				basetriggers.smx\n\
				basevotes.smx\n\
				clientprefs.smx\n\
				funcommands.smx\n\
				funvotes.smx\n\
				nextmap.smx\n\
				playercommands.smx\n\
				reservedslots.smx\n\
				sounds.smx\n\
				multimod.smx\n\
				multimod_vote.smx\n\
				multimod_menu.smx\n\
				multimod_rockthevote.smx\n\
				multimod_nextcurrentmod.smx");
		}
		
		case FILE_CONFIG:
		{
			WriteFileLine(f, "// Generated by MultiMod Plugin");
			WriteFileLine(f, "\
				echo ********************************************* \n\
				echo Executed %s's Config File \n\
				echo *********************************************", szModName);
		}
	}
	
	delete f;
}

stock void SetArrayValue(any[] TheArray, int iSize, any Value, int iStart = 0)
{
	for(int i = iStart; i < iSize; i++)
	{
		TheArray[i] = Value;
	}
}